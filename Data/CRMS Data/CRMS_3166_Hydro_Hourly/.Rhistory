scale_fill_manual(values=tbpal) + ylab(expression(paste("CO"[2], " Flux (mg m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = element_text(size=17),
axis.ticks = element_line(color="grey75"),
plot.title=element_text(size=18,face="bold",hjust = 0.5),
legend.text=element_text(size=17), legend.title=element_text(size=19),
panel.border =element_rect(color="grey75",fill=NA),panel.grid.minor = element_blank(),
panel.background = element_rect(fill="grey85"), strip.text.x = element_text(size = 13))
ggplot(ghg20,aes(x=type2,y=flux_co2,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CO"[2], " Flux (mg m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = element_text(size=17),
plot.title=element_text(size=18,face="bold",hjust = 0.5),
legend.text=element_text(size=17), legend.title=element_text(size=19),
panel.grid.minor = element_blank(),
strip.text.x = element_text(size = 13))
ggplot(ghg20,aes(x=type2,y=flux_co2,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CO"[2], " Flux (mg m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = element_text(size=17),
plot.title=element_text(size=18,face="bold",hjust = 0.5),
legend.text=element_text(size=17), legend.title=element_text(size=19),
panel.grid.minor = element_blank(),
strip.text.x = element_text(size = 13))
ggplot(ghg20,aes(x=type2,y=flux_co2,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CO"[2], " Flux (mg m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = element_text(size=17),
plot.title=element_text(size=18,face="bold",hjust = 0.5),
legend.text=element_text(size=17), legend.title=element_text(size=19),
panel.grid.minor = element_blank(),
strip.text.x = element_text(size = 13))
ggplot(ghg20,aes(x=type2,y=flux_co2,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CO"[2], " Flux (mg m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = e0lement_text(size=17),
plot.title=element_text(size=18,face="bold",hjust = 0.5))
ggplot(ghg20,aes(x=type2,y=flux_co2,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CO"[2], " Flux (mg m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = e0lement_text(size=17),
plot.title=element_text(size=18,face="bold",hjust = 0.5))
ggplot(ghg20,aes(x=type2,y=flux_co2,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CO"[2], " Flux (mg m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = e0lement_text(size=17),
plot.title=element_text(size=18,face="bold",hjust = 0.5),
legend.text=element_text(size=17), legend.title=element_text(size=19),
strip.text.x = element_text(size = 13))
ggplot(ghg20,aes(x=type2,y=flux_co2,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CO"[2], " Flux (mg m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = element_text(size=17),
plot.title=element_text(size=18,face="bold",hjust = 0.5),
legend.text=element_text(size=17), legend.title=element_text(size=19),
strip.text.x = element_text(size = 13))
ggplot(ghg20,aes(x=type2,y=flux_co2,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CO"[2], " Flux (mg m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = element_text(size=17),
plot.title=element_text(size=18, hjust = 0.5),
legend.text=element_text(size=17), legend.title=element_text(size=19),
strip.text.x = element_text(size = 13))
ggplot(ghg20,aes(x=type2,y=flux_co2,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CO"[2], " Flux (mg m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12,hjust = 0.5),axis.title = element_text(size=17),
plot.title=element_text(size=18 ),
legend.text=element_text(size=17), legend.title=element_text(size=19),
strip.text.x = element_text(size = 13))
ggplot(ghg20,aes(x=type2,y=flux_co2,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CO"[2], " Flux (mg m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = element_text(size=17),
plot.title=element_text(size=18 ), theme(axis.text.x = element_text(angle = 45, hjust = 1)),
legend.text=element_text(size=17), legend.title=element_text(size=19),
strip.text.x = element_text(size = 13))
ggplot(ghg20,aes(x=type2,y=flux_co2,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CO"[2], " Flux (mg m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = element_text(size=17),
plot.title=element_text(size=18 ), axis.text.x = element_text(angle = 45, hjust = 1),
legend.text=element_text(size=17), legend.title=element_text(size=19),
strip.text.x = element_text(size = 13))
ggplot(ghg20,aes(x=type2,y=flux_ch4,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CO"[2], " Flux (mg m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = element_text(size=17),
plot.title=element_text(size=18 ), axis.text.x = element_text(angle = 45, hjust = 1),
legend.text=element_text(size=17), legend.title=element_text(size=19),
strip.text.x = element_text(size = 13)) # 9 x 5
ggplot(ghg20,aes(x=type2,y=flux_ch4,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CH"[4], " Flux (mg m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = element_text(size=17),
plot.title=element_text(size=18 ), axis.text.x = element_text(angle = 45, hjust = 1),
legend.text=element_text(size=17), legend.title=element_text(size=19),
strip.text.x = element_text(size = 13)) # 9 x 5
ggplot(ghg20,aes(x=type2,y=flux_n2o,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CH"[4], " Flux (mg m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = element_text(size=17),
plot.title=element_text(size=18 ), axis.text.x = element_text(angle = 45, hjust = 1),
legend.text=element_text(size=17), legend.title=element_text(size=19),
strip.text.x = element_text(size = 13)) # 9 x 5
ggplot(ghg20,aes(x=type2,y=flux_n2o,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CH"[4], " Flux (ug m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = element_text(size=17),
plot.title=element_text(size=18 ), axis.text.x = element_text(angle = 45, hjust = 1),
legend.text=element_text(size=17), legend.title=element_text(size=19),
strip.text.x = element_text(size = 13)) # 9 x 5
tbn2o<-ggplot(tb,aes(x=type2,y=flux_n2o,fill=Trt))+geom_boxplot(width=0.75,position = position_dodge(preserve = "single")) +
facet_wrap(~month) + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("N"[2], "O Flux (ug m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Sites")+ theme_bw()+
theme(axis.text=element_text(size=12,color="grey10"),axis.title = element_text(size=17,color="grey10"),
axis.ticks = element_line(color="grey75"),
plot.title=element_text(size=18,face="bold",hjust = 0.5),
legend.text=element_text(size=15, color="grey10"), legend.title=element_text(size=17,color="grey10"),
strip.text.x = element_text(size = 13))
tbn2o
ggplot(ghg20,aes(x=type2,y=flux_n2o,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CH"[4], " Flux (ug m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = element_text(size=17),
plot.title=element_text(size=18 ), axis.text.x = element_text(angle = 45, hjust = 1),
legend.text=element_text(size=17), legend.title=element_text(size=19),
strip.text.x = element_text(size = 13)) # 9 x 5
levels(ghg20$type2)
levels(ghg20$type2)<-c("Girdled-BOT","Girdled-Top","Live-BOT","Live-TOP","None-Soil")
levels(ghg20$Date)
ghg20$Date
levels(ghg20$Date)<-as.factor(ghg20$Date,levels = c("2019-May","2019-Jul","2019-Aug","2020-May","2020-Jul","2020-Aug"))
as.factor(ghg20$Date)
ghg20$Date<-as.factor(ghg20$Date, levels = c("2019-May","2019-Jul","2019-Aug","2020-May","2020-Jul","2020-Aug"))
levels(ghg20$Date)<-c("2019-May","2019-Jul","2019-Aug","2020-May","2020-Jul","2020-Aug")
ggplot(ghg20,aes(x=type2,y=flux_co2,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CO"[2], " Flux (mg m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = element_text(size=17),
plot.title=element_text(size=18 ), axis.text.x = element_text(angle = 45, hjust = 1),
legend.text=element_text(size=17), legend.title=element_text(size=19),
strip.text.x = element_text(size = 13)) # 9 x 5
levels(ghg20$Date)<-c("2019-May","2019-Jul","2019-Aug","2020-May","2020-Jul","2020-Aug")
levels(ghg20$Date)
str(ghg20$Date)
ghg20$Date<-as.factor(ghg20$Date)
ggplot(ghg20,aes(x=type2,y=flux_co2,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CO"[2], " Flux (mg m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = element_text(size=17),
plot.title=element_text(size=18 ), axis.text.x = element_text(angle = 45, hjust = 1),
legend.text=element_text(size=17), legend.title=element_text(size=19),
strip.text.x = element_text(size = 13)) # 9 x 5
levels(ghg20$Date)
ggplot(ghg20,aes(x=type2,y=flux_co2,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CO"[2], " Flux (mg m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = element_text(size=17),
plot.title=element_text(size=18 ), axis.text.x = element_text(angle = 45, hjust = 1),
legend.text=element_text(size=17), legend.title=element_text(size=19),
strip.text.x = element_text(size = 13)) # 9 x 5
ggplot(ghg20,aes(x=type2,y=flux_ch4,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CH"[4], " Flux (mg m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = element_text(size=17),
plot.title=element_text(size=18 ), axis.text.x = element_text(angle = 45, hjust = 1),
legend.text=element_text(size=17), legend.title=element_text(size=19),
strip.text.x = element_text(size = 13)) # 9 x 5
ggplot(ghg20,aes(x=type2,y=flux_n2o,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CH"[4], " Flux (ug m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = element_text(size=17),
plot.title=element_text(size=18 ), axis.text.x = element_text(angle = 45, hjust = 1),
legend.text=element_text(size=17), legend.title=element_text(size=19),
strip.text.x = element_text(size = 13)) # 9 x 5
levels(ghg20$Date)
ghg20$Date<- factor(ghg20$Date, levels = c("2019-May","2019-Jul","2019-Aug","2020-May","2020-Jul","2020-Aug"))
ggplot(ghg20,aes(x=type2,y=flux_co2,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CO"[2], " Flux (mg m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = element_text(size=17),
plot.title=element_text(size=18 ), axis.text.x = element_text(angle = 45, hjust = 1),
legend.text=element_text(size=17), legend.title=element_text(size=19),
strip.text.x = element_text(size = 13)) # 9 x 5
levels(ghg20$Date)
ghg20<-data.table(read_excel('C:/Users/melindamartinez/OneDrive - DOI/Data/GHG_Girdled/TB_GHG_Flux_All_2020_HMR.xlsx'),
stringsAsFactors = TRUE)
head(ghg20)
ghg20$Date<-paste(ghg20$Year,ghg20$month,sep="-")
ghg20$type2<-as.factor(paste(ghg20$Trt,ghg20$type,sep="-"))
levels(ghg20$type2)<-c("Girdled-BOT","Girdled-Top","Live-BOT","Live-TOP","None-Soil")
ghg20$Date
ghg20$Date<- factor(ghg20$Date, levels = c("2019-May","2019-Jul","2019-Aug","2020-Jun","2020-Jul","2020-Aug"))
ggplot(ghg20,aes(x=type2,y=flux_co2,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CO"[2], " Flux (mg m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = element_text(size=17),
plot.title=element_text(size=18 ), axis.text.x = element_text(angle = 45, hjust = 1),
legend.text=element_text(size=17), legend.title=element_text(size=19),
strip.text.x = element_text(size = 13)) # 9 x 5
ggplot(ghg20,aes(x=type2,y=flux_ch4,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CH"[4], " Flux (mg m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = element_text(size=17),
plot.title=element_text(size=18 ), axis.text.x = element_text(angle = 45, hjust = 1),
legend.text=element_text(size=17), legend.title=element_text(size=19),
strip.text.x = element_text(size = 13)) # 9 x 5
ggplot(ghg20,aes(x=type2,y=flux_n2o,fill=Trt))+geom_boxplot(width=0.5,position = position_dodge(preserve = "single")) +
facet_wrap(~Date,scales = "free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_manual(values=tbpal) + ylab(expression(paste("CH"[4], " Flux (ug m"^"-2","hr"^"-1",")",sep=""))) + xlab("")+
labs(fill="Treatment")+ theme_bw()+
theme(axis.text=element_text(size=12),axis.title = element_text(size=17),
plot.title=element_text(size=18 ), axis.text.x = element_text(angle = 45, hjust = 1),
legend.text=element_text(size=17), legend.title=element_text(size=19),
strip.text.x = element_text(size = 13)) # 9 x 5
library(dplyr)
setwd("C:/Users/melindamartinez/OneDrive - DOI/Data/CRMS Data/CRMS_3166_Hydro_Hourly")
all_3166_hydro<-read.csv("CRMS_3166_Hydro_Hourly.csv",check.names = F, stringsAsFactors = TRUE)
head(all_3166_hydro)
str(all_3166_hydro)
colnames(all_3166_hydro)<-c( "Station ID"                                 ,"Date",
"Time"                            ,"Time Zone",
"Sensor Environment"                         ,"Raw Water Temperature" ,
"Adjusted Water Temperature"         ,"Raw Specific Conductance"  ,
"Adjusted Specific Conductance"      ,"Raw Salinity" ,
"Adjusted Salinity"                    ,"Raw Water Level" ,
"Adjusted Water Level"                  ,"Raw Water Elevation to Marsh",
"Adjusted Water Elevation to Marsh"     ,"Raw Water Elevation to Datum" ,
"Adjusted Water Elevation to Datum"     ,"Raw Marsh Mat Elevation",
"Adjusted Marsh Mat Elevation to Datum" ,"Geoid",
"Raw Battery"                            ,"Adjusted Battery",
"Raw Wind Speed"                       ,"Adjusted Wind Speed",
"Raw Wind Direction"               ,"Adjusted Wind Direction",
"Raw Velocity"                      ,"Adjusted Velocity",
"Raw Precipitation"              ,"Adjusted Precipitation",
"Raw Air Pressure"                ,"Adjusted Air Pressure",
"Raw Total Chlorophyll"       ,"Adjusted Total Chlorophyll",
"Raw Dissolved Oxygen"        ,"Adjusted Dissolved Oxygen" ,
"Raw pH"                          ,"Adjusted pH",
"Raw Turbidity"                        ,"Adjusted Turbidity",
"Raw Discharge"               ,"Adjusted Discharge",
"Organization Name"                          ,"Comments",
"Latitude"                                   ,"Longitude" )
all_3166_hydro$DateTime<-paste(all_3166_hydro$Date,all_3166_hydro$Time, sep=" ")
all_3166_hydro$DateTime<-as.POSIXct(all_3166_hydro$DateTime,format= "%m/%d/%Y %H:%M:%S")
str(all_3166_hydro)
h01<-hydro_3166_points %>% filter(`Station ID`=="CRMS3166-H01")
h01<-all_3166_hydro %>% filter(`Station ID`=="CRMS3166-H01")
unique(all_3166_hydro$`Station ID`)
m01<-all_3166_hydro %>% filter(`Station ID`=="CRMS3166-M01")
m100<-all_3166_hydro %>% filter(`Station ID`=="CRMS3166-M100")
plot(`Adjusted Water Level`~ DateTime, h01)
plot(`Adjusted Water Level`~ DateTime, m01)
plot(`Adjusted Water Level`~ DateTime, m100)
library(sf)
library(centerline)
library(dplyr)
library(smoothr)
#### Read in Data files ####
feat_connect<-st_read("C:/Users/melindamartinez/OneDrive - DOI/Documents/ArcGIS/Projects/UVVR_Perforation/MU_BW_FID_2046_Smooth_NoVeg_AggToFeat.shp")
intersected<-feat_connect %>% filter(Intersect == "Yes")
water_boundary<-st_read("C:/Users/melindamartinez/OneDrive - DOI/Documents/ArcGIS/Projects/UVVR_Perforation/BNDY_Shoreline_MGS_Buffer_5m.shp")
water_boundary<-st_read("C:/Users/melindamartinez/OneDrive - DOI/Documents/ArcGIS/Projects/UVVR_Perforation/BNDY_Shoreline_MGS_Buffer_0_0125mi.shp")
lifespan<-st_read("C:/Users/melindamartinez/OneDrive - DOI/Data/GIS/Marsh Units/mu_lifespan_CB/mu_lifespan_CB.shp")
cmu_bw<-st_read("C:/Users/melindamartinez/OneDrive - DOI/Data/GIS/Conceptualmarsh/CMU_BW/CMU_BW.shp")
# Path to the .gdb file
gdb_path_208 <- "E:/GIS/NHD/NHDPLUS_H_0208_HU4_GDB/NHDPLUS_H_0208_HU4_GDB.gdb"
gdb_path_206 <- "E:/GIS/NHD/NHDPLUS_H_0208_HU4_GDB/NHDPLUS_H_0206_HU4_GDB.gdb"
# List available layers in the geodatabase
st_layers(gdb_path)
# Read a specific layer (e.g., "your_layer_name")
gdb_flowline_208 <- st_read(gdb_path_208, layer = "NHDFlowline")
gdb_flowline_206 <- st_read(gdb_path_206, layer = "NHDFlowline")
# Path to the .gdb file
gdb_path_208 <- "E:/GIS/NHD/NHDPLUS_H_0208_HU4_GDB/NHDPLUS_H_0208_HU4_GDB.gdb"
# Read a specific layer (e.g., "your_layer_name")
gdb_flowline_208 <- st_read(gdb_path_208, layer = "NHDFlowline")
# Read a specific layer (e.g., "your_layer_name")
gdb_flowline_208 <- st_read(gdb_path_208, layer = "NHDFlowline")
gdb_flowline_206 <- st_read(gdb_path_206, layer = "NHDFlowline")
##### Data Processing #####
# Transform to same crs
lifespan<-st_transform(lifespan,crs(feat_connect))
# Perform spatial join
joined_data <- st_join(cmu_bw, lifespan,largest = TRUE) %>% select(FID_CMU.x,FID_CMU.y,TYP,geometry)
colnames(joined_data)
colnames(joined_data)<-c("FID_CMU_BW","FID_CMU_Lifespan","TYP","geometry")
# Merge shapefiles by appending the rows (rbind)
gdb_flowline <- rbind(gdb_flowline_208, gdb_flowline_206)
gdb_flowline_208
# Merge shapefiles by appending the rows (rbind)
gdb_flowline <- rbind(gdb_flowline_208, gdb_flowline_206)
gdb_flowline_206
gdb_flowline_206 <- st_read(gdb_path_206, layer = "NHDFlowline")
gdb_path_206 <- "E:/GIS/NHD/NHDPLUS_H_0208_HU4_GDB/NHDPLUS_H_0206_HU4_GDB.gdb"
gdb_flowline_206 <- st_read(gdb_path_206, layer = "NHDFlowline")
# Path to the .gdb file
gdb_path_208 <- "E:/GIS/NHD/NHDPLUS_H_0208_HU4_GDB/NHDPLUS_H_0208_HU4_GDB.gdb"
gdb_path_206 <- "E:/GIS/NHD/NHDPLUS_H_0206_HU4_GDB/NHDPLUS_H_0206_HU4_GDB.gdb"
gdb_flowline_206 <- st_read(gdb_path_206, layer = "NHDFlowline")
# Merge shapefiles by appending the rows (rbind)
gdb_flowline <- rbind(gdb_flowline_208, gdb_flowline_206)
# Transform to same crs
flow_proj<-st_transform(gdb_flowline,crs(intersected))
# Read a specific layer (e.g., "your_layer_name")
water_proj<-st_transform(water_boundary,crs(intersected))
# Define a function to calculate the mode
get_mode <- function(x) {
uniq_x <- unique(x)                # Get unique values
mode_val <- uniq_x[which.max(tabulate(match(x, uniq_x)))]  # Find the mode
return(mode_val)
}
cmu_bw_fid<-joined_data %>% filter(FID_CMU_BW == 2046)
plot(st_geometry(cmu_bw_fid))
lifespan_fid<- lifespan %>% filter(FID_CMU == get_mode(cmu_bw_fid$FID_CMU_Lifespan))
lifespan %>% filter(FID_CMU == get_mode(cmu_bw_fid$FID_CMU_Lifespan))
# Explode the multipolygon into individual polygons
exploded_polygons <- st_cast(cmu_bw_fid, "POLYGON")
# Apply Chaikin smoothing
smoothed_polygon <- smooth(exploded_polygons, method = "chaikin")
# Calculate the area of the polygon
smoothed_polygon$area <- st_area(smoothed_polygon)
# Calculate the perimeter (boundary length) of the polygon
smoothed_polygon$perimeter <- st_length(st_cast(smoothed_polygon, "MULTILINESTRING"))
# Convert area to numeric
smoothed_polygon$area <- as.numeric(st_area(smoothed_polygon))
# Convert perimeter to numeric
smoothed_polygon$perimeter <- as.numeric(st_length(st_cast(smoothed_polygon, "MULTILINESTRING")))
# Looking at unvegetaed only
smoothed_polygon <- smoothed_polygon %>% filter(TYP=="unvegetated")
# Creating unique IDs
smoothed_polygon$ID<- seq(1,length(smoothed_polygon$FID_CMU_BW))
# View the sf object with numeric attributes
print(smoothed_polygon)
# Convert the polygon boundary to a LINESTRING
polygon_boundary <- st_boundary(lifespan_fid)
# INTERSECTING Shapefiles
# Intersect with LINESTRING Marsh Unit Boundary
intersect_mu_boundary<-st_intersects(smoothed_polygon,polygon_boundary)
# Filter polygons that intersect with the LINESTRING
intersecting_boundary_polygons <- smoothed_polygon[lengths(intersect_mu_boundary) > 0, ]
# Intersect with NHD Flow LINESTRING
intersect_flow<-st_intersects(st_zm(flow_proj),smoothed_polygon)
intersecting_flow_polygons <- smoothed_polygon[lengths(intersect_flow) > 0, ]
# Intersect with Water Boundary Polygon
intersect_water<-st_intersects(smoothed_polygon,water_boundary)
intersecting_water_polygons <- smoothed_polygon[lengths(intersect_water) > 0, ]
plot(st_geometry(polygon_boundary))
# Add Intersected Polygons Info to Original Polygon
smoothed_polygon$Boundary_Connect<-NA
smoothed_polygon$OpenWater_Connect<-NA
smoothed_polygon$Flow_Connect<-NA
# Assign a character value to one row in the 'Value' column
smoothed_polygon$Boundary_Connect[which(smoothed_polygon$ID %in% unique(intersecting_boundary_polygons$ID))] <- as.character("Yes")
smoothed_polygon$Flow_Connect[which(smoothed_polygon$ID %in% unique(intersecting_flow_polygons$ID))] <- as.character("Yes")
smoothed_polygon$OpenWater_Connect[which(smoothed_polygon$ID %in% unique(intersecting_water_polygons$ID))] <- as.character("Yes")
# Simplify the polygon
#simplified_polygon <- ms_simplify(sub_smooth, keep = 1) # Adjust 'keep' to control simplification
# Get outer boundary coodinates
coords<-st_coordinates(smoothed_polygon %>% filter(ID == 1))
# l1 are considered outer boundary coordinates here
new_coords<-coords[coords[,3]==1,]
# Convert the outer boundary coordinates back to polygon
new_poly<-st_polygon(list(new_coords[,1:2]))
# Convert to an sf object
new_polygon_sf <- st_sfc(new_poly, crs = st_crs(smoothed_polygon))
new_polygon_sf <- st_sf(geometry = new_polygon_sf)
# Create a buffer around the simplified polygon
buffered_polygon <- st_buffer(new_polygon_sf, dist = 1) # Adjust 'dist' for the desired roundness
lake_centerline <- cnt_path_guess(buffered_polygon, keep = 3)
# Use st_line_sample() to get the midpoint (50% of the length)
midpoint <- st_line_sample(lake_centerline, sample = 0.5)
# Clip to polygon
lake_centerline <- st_intersection(lake_centerline,new_polygon_sf)
# Calculate the length of the Central LINESTRING
lake_centerline$length <- st_length(lake_centerline)
# Checking plot boundary
plot(st_geometry(buffered_polygon) )
plot(lake_centerline,col="red",add=TRUE)
# Create points along the LINESTRING at specific intervals
center_points <- st_line_sample(lake_centerline, sample = seq(0, 1, length.out = 10))
# Create points along the LINESTRING at specific intervals
center_points <- st_line_sample(lake_centerline, sample = seq(0, 1, length.out = 10))
# Convert the result to sf points
center_points_sf <- st_sf(geometry = center_points)
plot(center_points_sf,col="blue",add=TRUE)
# Function to compute perpendicular vectors
create_perpendicular <- function(center_line, distance = 1) {
# Calculate the direction of each segment
directions <- st_coordinates(center_line)
vectors <- diff(directions)
# Create perpendicular vectors (-dy, dx)
perpendiculars <- apply(vectors, 1, function(v) c(-v[2], v[1]))
# Normalize the vectors and multiply by the desired length
perpendiculars <- t(perpendiculars / sqrt(rowSums(perpendiculars^2))) * distance
# Create perpendicular lines at each segment midpoint
midpoints <- (directions[-nrow(directions), ] + directions[-1, ]) / 2
perpendicular_lines <- mapply(function(mid, perp) {
st_linestring(rbind(mid + perp, mid - perp))
}, split(midpoints, row(midpoints)), split(perpendiculars, row(perpendiculars)))
return(st_sfc(perpendicular_lines))
}
# Apply the function to create perpendicular LINESTRINGs
perpendicular_lines_sf <- st_sf(geometry = create_perpendicular(lake_centerline, distance = 2))
lake_centerline
# Calculate the direction of each segment
directions <- st_coordinates(lake_centerline)
directions
vectors <- diff(directions)
vectors
?diff()
# Create perpendicular vectors (-dy, dx)
perpendiculars <- apply(vectors, 1, function(v) c(-v[2], v[1]))
perpendiculars
# Normalize the vectors and multiply by the desired length
perpendiculars <- t(perpendiculars / sqrt(rowSums(perpendiculars^2))) * distance
t(perpendiculars / sqrt(rowSums(perpendiculars^2)))
# Normalize the vectors and multiply by the desired length
perpendiculars <- t(perpendiculars / sqrt(rowSums(perpendiculars^2))) * 2
perpendiculars
# Create perpendicular lines at each segment midpoint
midpoints <- (directions[-nrow(directions), ] + directions[-1, ]) / 2
midpoints
perpendicular_lines <- mapply(function(mid, perp) {
st_linestring(rbind(mid + perp, mid - perp))
}, split(midpoints, row(midpoints)), split(perpendiculars, row(perpendiculars)))
perpendicular_lines
plot(perpendicular_lines,col="blue",add=TRUE)
perpendicular_lines
plot(st_sfc(perpendicular_lines),col="blue",add=TRUE)
vectors <- base::diff(directions)
vectors
directions
# Install packages if not already installed
install.packages(c("sf", "lwgeom"))
# Load libraries
library(sf)
library(lwgeom)
# Sample polygon
polygon <- st_polygon(list(rbind(
c(0, 0), c(10, 0), c(10, 10), c(0, 10), c(0, 0)
)))
# Create a simple feature (sf) object for the polygon
polygon_sf <- st_sf(geometry = st_sfc(polygon))
# Sample center LINESTRING inside the polygon
center_linestring <- st_linestring(rbind(
c(2, 2), c(8, 8)
))
# Create an sf object for the center LINESTRING
center_sf <- st_sf(geometry = st_sfc(center_linestring))
plot(center_sf)
plot(polygon)
plot(center_sf,add=TRUE)
# Create points along the LINESTRING at specific intervals
center_points <- st_line_sample(center_sf, sample = seq(0, 1, length.out = 10))
# Convert the result to sf points
center_points_sf <- st_sf(geometry = center_points)
plot(center_points_sf,add=TRUE)
# Function to compute perpendicular vectors
create_perpendicular <- function(center_line, distance = 1) {
# Calculate the direction of each segment
directions <- st_coordinates(center_line)
vectors <- diff(directions)
# Create perpendicular vectors (-dy, dx)
perpendiculars <- apply(vectors, 1, function(v) c(-v[2], v[1]))
# Normalize the vectors and multiply by the desired length
perpendiculars <- t(perpendiculars / sqrt(rowSums(perpendiculars^2))) * distance
# Create perpendicular lines at each segment midpoint
midpoints <- (directions[-nrow(directions), ] + directions[-1, ]) / 2
perpendicular_lines <- mapply(function(mid, perp) {
st_linestring(rbind(mid + perp, mid - perp))
}, split(midpoints, row(midpoints)), split(perpendiculars, row(perpendiculars)))
return(st_sfc(perpendicular_lines))
}
# Apply the function to create perpendicular LINESTRINGs
perpendicular_lines_sf <- st_sf(geometry = create_perpendicular(center_sf, distance = 2))
create_perpendicular(center_sf, distance = 2)
# Calculate the direction of each segment
directions <- st_coordinates(center_sf)
directions
vectors <- diff(directions)
vectors
# Create perpendicular vectors (-dy, dx)
perpendiculars <- apply(vectors, 1, function(v) c(-v[2], v[1]))
perpendiculars
perpendiculars
